'''
学习 Python 练习

学习使用 pygame 制作小游戏
https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/10.%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91.md

大球吃小球的游戏:
1. 初始化 pygame
2. 设置窗口
3. 设置内容
4. 实现动画效果

相较于案例，增加了积分算法，在小球上展示积分，吃掉其他小球后，会获得相应的积分

'''

from curses.ascii import STX
from enum import Enum,unique
from math import sqrt
from random import randint
from re import X
from tkinter import Y, font
from turtle import color, distance

import pygame
from pyparsing import col


@unique
class Color(Enum):
    '''
    颜色
    '''
    RED = (255,0,0)
    GREEN = (0,255,0)
    BLACK = (0,0,0)
    WHITE = (255,255,255)
    GRAY = (242,242,242)

    @staticmethod
    def random_color():
        '''
        获取随机颜色
        '''
        r = randint(0,255)
        g = randint(0,255)
        b = randint(0,255)
        return r,g,b
    
class Ball(object):
    '''
    球
    '''
    def __init__(self,x,y,radius,sx,sy,color,defen) -> None:
        ''' 初始化方法 '''
        self.x = x
        self.y = y
        self.radius = radius
        self.sx = sx
        self.sy = sy
        self.color = color
        self.alive = True
        self.defen = defen

    def move(self,screen):
        '''移动'''
        self.x += self.sx
        self.y += self.sy


        if self.x + self.radius >= screen.get_width():
            if self.sx <0 :
                self.sx = self.sx
            else:
                self.sx = - self.sx


        if self.y +self.radius >= screen.get_height():
            if self.sy < 0:
                self.sy = self.sy
            else:
                self.sy = -self.sy

        if self.x - self.radius <=0:
            if self.sx <0 :
                self.sx = - self.sx
            else:
                self.sx = self.sx

        if self.y - self.radius <=0 :
            if self.sy < 0 :
                self.sy = - self.sy
            else:
                self.sy = self.sy
        
    def eat(self,other):
        ''' 吃其他球 '''
        if self.alive and other.alive and self != other:
            dx,dy = self.x - other.x, self.y - other.y
            distance = sqrt ( dx ** 2 + dy **2)
            if distance < self.radius +other.radius and self.radius > other.radius:
                other.alive = False
                self.radius = self.radius + int(other.radius *0.146)
                self.defen +=int(other.radius *0.146)
    
    def draw(self,screen):
        '''在窗口上绘制球'''
        ball = pygame.draw.circle(screen,self.color,(self.x,self.y),self.radius,0) # 绘制一个圆（参数分别为：屏幕、颜色、圆心位置，半径，0表示填充圆）
        '''在球上加载分数'''
        font_name = pygame.font.match_font('songti')
        font = pygame.font.Font(font_name,20)
        font_surface = font.render(str(self.defen), True, 'black')
        screen.blit(font_surface,(self.x-self.radius/3,self.y-self.radius/3))

def main():
    '''
    主应用，初始化相关内容
    '''
    pygame.init() # 初始化导入的 pygame 模块
    screen = pygame.display.set_mode((1000,900)) # 初始化显示窗口，并设置窗口尺寸
    pygame.display.set_caption('大球吃小球') # 设置窗口标题
    
    x,y = 50,50
    balls = []

    
    # ball_image = pygame.image.load('./res/ball.png') # 通过指定文件的文件名加载图像
    # screen.blit(ball_image,(50,50)) # 在窗口上渲染图像
    
    runing =  True
    # 开启一个事件循环处理发生的事件
    while runing:
        # 从消息队列中获取事件并对事件进行处理
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                runing = False
                ball.alive = False
            # 处理鼠标点击事件
            if event.type ==pygame.MOUSEBUTTONDOWN and event.button ==1:
                x,y = event.pos
                radius = randint(10,100)
                sx,sy = randint(-10,10),randint(-10,10)
                color = Color.random_color()
                
                # 在点击鼠标的位置创建一个球(大小、速度和颜色随机)
                ball = Ball(x,y,radius=radius,sx=sx,sy=sy,color=color,defen=int(radius *0.146))
                balls.append(ball)

        screen.fill((255,255,255)) # 设置窗口的背景颜色
        
        for ball in balls:
            if ball.alive:
                ball.draw(screen=screen)
            else:
                balls.remove(ball)
        
        # pygame.draw.circle(screen,(255,0,0),(x,y),30,0) # 绘制一个圆（参数分别为：屏幕、颜色、圆心位置，半径，0表示填充圆）

        pygame.display.flip() # 刷新当前窗口
        pygame.time.delay(50) # 每 50 毫秒就改变小球的位置，再刷新窗口
        
        for ball in balls:
            ball.move(screen)

            # 检查球有没有吃到其他的球
            for other in balls:
                ball.eat(other)

if __name__ =="__main__":
    main()